name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY_WEBAPP: redis-pubsub-101/webapp
  ECR_REPOSITORY_CONTROLLER: redis-pubsub-101/controller
  ECR_REPOSITORY_SCHEDULER: redis-pubsub-101/scheduler

jobs:
  build:
    name: Build and Push Images to AWS ECR to AWS ECR
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push images to Amazon ECR
      id: build-images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build and push each image with the unique Git SHA tag
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_WEBAPP:$IMAGE_TAG -f src/app/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_WEBAPP:$IMAGE_TAG

        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_CONTROLLER:$IMAGE_TAG -f src/controller/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_CONTROLLER:$IMAGE_TAG

        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_SCHEDULER:$IMAGE_TAG -f src/scheduler/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_SCHEDULER:$IMAGE_TAG

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    # This job is configured to use the 'production' environment.
    # To enable manual approval for deployments, configure the 'production'
    # environment in your repository settings to require reviewers.
    environment: production
    needs: build

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.2.0 # Or your desired version

    # This step initializes Terraform, downloading the necessary providers.
    # The -backend-config options are used to configure the S3 backend
    # where Terraform stores its state file. This is crucial for collaboration
    # and for running Terraform in an automated CI/CD environment.
    - name: Terraform Init
      run: |
        terraform -chdir=infra/environments/develop init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=redis-pubsub-101.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"

    # This is the core deployment step. `terraform apply` tells Terraform to
    # make the actual infrastructure match the desired state in the .tf files.
    # We use `-var` to pass the unique IMAGE_TAG (the Git SHA) to our
    # Terraform variables. This is how Terraform knows to update the ECS
    # service with the new Docker image.
    # The `-auto-approve` flag is used to automatically confirm the changes,
    # which is necessary for a non-interactive CI/CD pipeline.
    - name: Terraform Apply
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        terraform -chdir=infra/environments/develop apply -auto-approve \
          -var="webapp_image_tag=$IMAGE_TAG" \
          -var="controller_image_tag=$IMAGE_TAG" \
          -var="scheduler_image_tag=$IMAGE_TAG"
